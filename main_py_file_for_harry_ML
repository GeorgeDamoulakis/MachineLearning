from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
import numpy as np
import matplotlib.pyplot as plt
from itertools import cycle

from sklearn import datasets, metrics, model_selection, svm
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp
from sklearn.metrics import roc_auc_score



# Load dataset
url = "C:\\Users\\grdmg\\test3.csv"
names = ["LymphedemaAfterSurgery_YN", "BreastReconstruction_YN", "RT_ever", "Median_Income", "Age_Group", "Distance_grp", "Race_Ethn", "Marital", "Smoking", "Employment", "Stage", "Insurance", "Mastectomy_YN", "Surgery_type", "BMIatEncounter"]
dataset = read_csv(url, names=names)

print(dataset.shape)
# head
print(dataset.head(20))

# Split-out validation dataset
array = dataset.values
X1 = dataset.drop('LymphedemaAfterSurgery_YN', 1)
X = X1.values
#print(X)
y = array[:,0]
#print(y)
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20)

# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('RFC', RandomForestClassifier(max_depth=6)))
models.append(('SVC', SVC(gamma='auto')))
# evaluate each model in turn
results = []
names = []
for name, model in models:
	kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
	cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
	results.append(cv_results)
	names.append(name)
	print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))    
    
# Compare Algorithms
pyplot.boxplot(results, labels=names)
pyplot.title('Algorithm Comparison')
pyplot.show()

print("-------------------------------------------------------")  
print("for SVC")  
model = SVC(gamma='auto')
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

print("-------------------------------------------------------")  
print("for RFC")
model = RandomForestClassifier(max_depth=6, random_state=0)
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
print("-------------------------------------------------------")  
print("for NB")
model =  GaussianNB()
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
print("-------------------------------------------------------")  
print("for CART")
model =  DecisionTreeClassifier()
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
print("-------------------------------------------------------")  
print("for KNN")
model =  KNeighborsClassifier()
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
print("-------------------------------------------------------")  
print("for LDA")
model =  LinearDiscriminantAnalysis()
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
print("-------------------------------------------------------")  
print("for LR")
model =  LogisticRegression(solver='liblinear', multi_class='ovr')
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)
# Evaluate predictions
print("the accuracy of the model is: ", accuracy_score(Y_validation, predictions))
print(classification_report(Y_validation, predictions))
